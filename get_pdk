#!/usr/bin/env python3
# -*- coding: utf8 -*-
# Copyright Â©2020-2022 The American University in Cairo and the Cloud V Project.
#
# This file is part of the DFFRAM Memory Compiler.
# See https://github.com/Cloud-V/DFFRAM for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import os
import sys
import uuid
import shutil
import pathlib
import tempfile
import subprocess

try:
    import click
except ImportError:
    print(
        "You need to install click and pyyaml: python3 -m pip install 'click>7' pyyaml"
    )
    exit(os.EX_CONFIG)


def mkdirp(path):
    return pathlib.Path(path).mkdir(parents=True, exist_ok=True)


@click.command()
@click.option(
    "-f",
    "--metadata-file",
    "tool_metadata_file_path",
    default=None,
    help="Explicitly define a metadata file instead of searching for a metadata file",
)
@click.option(
    "-S",
    "--sky130-commit",
    default=None,
    help="Explicitly define a sky130 commit",
)
@click.option(
    "-P",
    "--open_pdks-commit",
    default=None,
    help="Explicitly define an open_pdks commit",
)
@click.option(
    "-v",
    "--pdk-variant",
    default="sky130A",
    help="The variant of the pdk. sky130A and sky130B are allowed.",
)
def main(tool_metadata_file_path, sky130_commit, open_pdks_commit, pdk_variant):
    """
    Installs PDK to /usr/local/pdk.

    Requires curl, tar, xzutils, may require sudo.
    """

    if sky130_commit is not None or open_pdks_commit is not None:
        if sky130_commit is None or open_pdks_commit is None:
            print(
                f"You need to specify both sky130 and open_pdks commits if you were to specify one.",
                file=sys.stderr,
            )
            exit(os.EX_USAGE)

    if sky130_commit is None and open_pdks_commit is None:
        import yaml

        if tool_metadata_file_path is None:
            tool_metadata_file_path = os.path.join(".", "tool_metadata.yml")
            if not os.path.exists(tool_metadata_file_path):
                tool_metadata_file_path = os.path.join(
                    ".", "dependencies", "tool_metadata.yml"
                )
                if not os.path.exists(tool_metadata_file_path):
                    print(
                        f"Any of ./tool_metadata.yml or ./dependencies/tool_metadata.yml not found. You'll need to specify the file path or the commits explicitly."
                    )
                    exit(os.EX_USAGE)

        tool_metadata = yaml.safe_load(open(tool_metadata_file_path).read())

        sky130_commit = [tool for tool in tool_metadata if tool["name"] == "sky130"][0][
            "commit"
        ]
        open_pdks_commit = [
            tool for tool in tool_metadata if tool["name"] == "open_pdks"
        ][0]["commit"]

    mkdirp("/usr/local/pdk")

    pdk = f"/usr/local/pdk/{pdk_variant}"

    if os.path.exists(pdk) and len(os.listdir(pdk)) != 0:
        backup_path = pdk
        it = 0
        while os.path.exists(backup_path) and len(os.listdir(backup_path)) != 0:
            it += 1
            backup_path = f"/usr/local/pdk/{pdk_variant}.bk{it}"
        print(f"PDK installation already found at {pdk}, moving to {backup_path}...")
        shutil.move(pdk, backup_path)

    mkdirp(f"/usr/local/pdk/{pdk_variant}")

    tempdir = tempfile.gettempdir()
    download_path = os.path.join(tempdir, f"{uuid.uuid4()}.tar.xz")

    url = f"https://github.com/Cloud-V/sky130-builds/releases/download/{sky130_commit}-{open_pdks_commit}/{pdk_variant}.tar.xz"

    print(f"Downloading the pre-built PDK at {url}...")
    subprocess.check_call(["curl", "-L", "-o", download_path, url])

    print("Untarring...")
    subprocess.check_call(["tar", "-xJvf", download_path, "-C", pdk])


if __name__ == "__main__":
    try:
        main()
    except PermissionError as e:
        print("Encountered a permission error: Re-try as sudo", file=sys.stderr)
        print(e, file=sys.stderr)
        exit(os.EX_NOPERM)
